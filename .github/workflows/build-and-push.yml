name: "Build and Push Docker Images"

on:
  push:
    branches:
      - main
    paths:
      - "images/**/Dockerfile"
  workflow_dispatch: # 添加手动触发选项

jobs:
  discover-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_dirs: ${{ steps.changed-files.outputs.dirs }}
      has_changes: ${{ steps.changed-files.outputs.has_changes }}
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Get changed Docker image directories"
        id: changed-files
        run: |
          echo "Checking for changed Dockerfiles..."

          # 处理不同的触发情况
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # 手动触发时，构建所有镜像
            DIRS=$(find images -name "Dockerfile" -type f | xargs -n1 dirname | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "Manual trigger - building all images"
          else
            # 正常推送时，只构建变更的镜像
            if [ -z "${{ github.event.before }}" ] || [ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]; then
              # 初始提交或无前置提交
              DIRS=$(find images -name "Dockerfile" -type f | xargs -n1 dirname | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
              echo "Initial commit - building all images"
            else
              # 正常的增量构建
              DIRS=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep 'images/.*/Dockerfile$' | xargs -n1 dirname | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
              echo "Incremental build - building changed images"
            fi
          fi

          echo "Changed directories: $DIRS"
          echo "dirs=${DIRS}" >> $GITHUB_OUTPUT

          # 检查是否有变更
          if [ "$DIRS" != "[]" ] && [ "$DIRS" != "" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: discover-changes
    if: needs.discover-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image_dir: ${{ fromJson(needs.discover-changes.outputs.changed_dirs) }}

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v3

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Log in to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Extract metadata"
        id: meta
        run: |
          CONTEXT_PATH="${{ matrix.image_dir }}"
          IMAGE_NAME=$(basename "$CONTEXT_PATH")
          DOCKER_HUB_REPO="${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}"

          # 使用更健壮的标签策略
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG="manual-$(date +%Y%m%d-%H%M%S)"
          else
            TAG=$(git rev-parse --short HEAD)
          fi

          echo "context_path=${CONTEXT_PATH}" >> $GITHUB_OUTPUT
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "docker_repo=${DOCKER_HUB_REPO}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: "Build and push image for ${{ matrix.image_dir }}"
        run: |
          CONTEXT_PATH="${{ steps.meta.outputs.context_path }}"
          DOCKER_HUB_REPO="${{ steps.meta.outputs.docker_repo }}"
          TAG="${{ steps.meta.outputs.tag }}"

          echo "=================================================="
          echo "Building and pushing image: ${DOCKER_HUB_REPO}:${TAG}"
          echo "Context path: ${CONTEXT_PATH}"
          echo "Image name: ${{ steps.meta.outputs.image_name }}"
          echo "=================================================="

          # 验证 Dockerfile 存在
          if [ ! -f "${CONTEXT_PATH}/Dockerfile" ]; then
            echo "❌ Error: Dockerfile not found at ${CONTEXT_PATH}/Dockerfile"
            exit 1
          fi

          # 构建并推送镜像
          docker buildx build \
            --push \
            --platform linux/amd64,linux/arm64 \
            --tag "${DOCKER_HUB_REPO}:${TAG}" \
            --tag "${DOCKER_HUB_REPO}:latest" \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --file "${CONTEXT_PATH}/Dockerfile" \
            "${CONTEXT_PATH}"

          echo "✅ Successfully built and pushed: ${DOCKER_HUB_REPO}:${TAG}"

      - name: "Image scan (optional)"
        continue-on-error: true
        run: |
          # 可选：添加镜像安全扫描
          echo "Skipping image scan for now..."
